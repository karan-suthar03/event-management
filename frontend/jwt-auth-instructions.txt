# Backend Instructions for Event Creation API (Spring Boot)

## /api/categories endpoint

### GET /api/categories
- Returns a list of all categories in the database.
- Example response:
[
  { "id": 1, "name": "Birthday", "emoji": "üéÇ" },
  { "id": 2, "name": "Anniversary", "emoji": "üíç" }
]

### POST /api/categories
- Adds a new category.
- Request body:
  { "name": "New Category", "emoji": "üéà" }
- Response:
  - On success: the created category object.
  - On error:
    { "error": "Missing name or emoji" }
    or
    { "error": "Category already exists" }

- Used to fetch all categories (GET) or add a new one (POST).

## 1. Event Creation Endpoint
- **POST /api/events**
- **Auth:** Requires JWT in `Authorization: Bearer <token>` header (admin only)
- **Consumes:** multipart/form-data (for images)

## 2. Request Structure
- **Form fields:**
  - `title` (String, required)
  - `category` (String, required, must match a category in the database)
  - `date` (String, required, e.g. 2025-06-10)
  - `description` (String, main description)
  - `highlights` (String, comma separated)
  - `organizerNotes` (String, optional)
  - `descriptions` (String, JSON array of objects: [{title, description}])
  - `images` (0 or more image files, use @RequestParam MultipartFile[] images)

## 3. Category Handling
- Categories must be fetched from the database in real time.
- When adding an event, validate that the submitted category exists in the database.
- Return 400 if the category does not exist.

## 4. Controller Example
```java
@PostMapping("/api/events")
@PreAuthorize("hasRole('ADMIN')")
public ResponseEntity<?> addEvent(
    @RequestParam String title,
    @RequestParam String category,
    @RequestParam String date,
    @RequestParam(required = false) String description,
    @RequestParam(required = false) String highlights,
    @RequestParam(required = false) String organizerNotes,
    @RequestParam(required = false) String descriptions, // JSON string
    @RequestParam(required = false) MultipartFile[] images
) {
    // 1. Parse descriptions JSON to List<DescriptionSection>
    // 2. Validate category exists
    // 3. Save event to DB
    // 4. Save images (e.g. to disk/cloud, store URLs in DB)
    // 5. Return event info or success
}
```

## 5. Notes
- Always validate category existence on event creation.
- The frontend should fetch categories from `/api/categories` before rendering the event form.
- Use @RequestParam for all fields (including descriptions as JSON string).
- Use @RequestPart if you want to receive a POJO for event and files separately.
- Parse descriptions JSON string to a List in the controller.
- Validate and sanitize all inputs.
- Return appropriate status codes.
